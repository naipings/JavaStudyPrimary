package data;

public class Data {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		//数据与表现分离
		
		//见实例：细胞自动机（cells）
		//————里面加入了本人上课时的相关注释
		//————CellMachine是实现最终业务逻辑的地方（在它的main()函数里面），所以CellMachine并不代表任何的东西，所以我们有价值去看的是（要重点关注的是）Cell、Field和View这三者之间的关系。
		//三者关系见手机截屏（注：Field是不知道View的，Field是用来管数据的，而View是用来表现的。Field只做好一件事情：管理好自己的数据；View也只做好自己的事情：画画）
				
		//数据与表现分离：
		//程序的业务逻辑与表现无关
		//————表现可以是图形的也可以是文本的
		//————表现可以是当地的也可以是远程的
		
		//View和Field的关系：
		//表现与数据的关系
		//View只管根据Field画出图形
		//Field只管数据的存放
		//一旦数据更新以后，通知View重新画出整个画面
		//————不去精心设计哪个局部需要更新
		//————这样简化了程序逻辑
		//————是在计算机运算速度提高的基础上实现的
		
		//责任驱动的设计：
		//将程序要实现的功能分配到合适的类/对象中去是设计中非常重要的一环
		
		//网格化：
		//图形界面本身有更高的解析度
		//但是将画面网格化以后，数据就更容易处理了
	}

}
